//@ts-nocheck
import { Timestamp } from "../../../../google/protobuf/timestamp";
import { Duration, DurationAmino, DurationSDKType } from "../../../../google/protobuf/duration";
import { Coin, CoinAmino, CoinSDKType } from "../../../../cosmos/base/v1beta1/coin";
import { BinaryReader, BinaryWriter } from "../../../../binary";
import { toTimestamp, fromTimestamp, isSet, fromJsonTimestamp } from "../../../../helpers";
import { Decimal } from "@cosmjs/math";
/**
 * Parameters for changing the weights in a balancer pool smoothly from
 * a start weight and end weight over a period of time.
 * Currently, the only smooth change supported is linear changing between
 * the two weights, but more types may be added in the future.
 * When these parameters are set, the weight w(t) for pool time `t` is the
 * following:
 *   t <= start_time: w(t) = initial_pool_weights
 *   start_time < t <= start_time + duration:
 *     w(t) = initial_pool_weights + (t - start_time) *
 *       (target_pool_weights - initial_pool_weights) / (duration)
 *   t > start_time + duration: w(t) = target_pool_weights
 */
export interface SmoothWeightChangeParams {
  /**
   * The start time for beginning the weight change.
   * If a parameter change / pool instantiation leaves this blank,
   * it should be generated by the state_machine as the current time.
   */
  start_time: Date;
  /** Duration for the weights to change over */
  duration: Duration;
  /**
   * The initial pool weights. These are copied from the pool's settings
   * at the time of weight change instantiation.
   * The amount PoolAsset.token.amount field is ignored if present,
   * future type refactorings should just have a type with the denom & weight
   * here.
   */
  initial_pool_weights: PoolAsset[];
  /**
   * The target pool weights. The pool weights will change linearly with respect
   * to time between start_time, and start_time + duration. The amount
   * PoolAsset.token.amount field is ignored if present, future type
   * refactorings should just have a type with the denom & weight here.
   */
  target_pool_weights: PoolAsset[];
}
export interface SmoothWeightChangeParamsProtoMsg {
  type_url: "/osmosis.gamm.v1beta1.SmoothWeightChangeParams";
  value: Uint8Array;
}
export interface SmoothWeightChangeParamsProtoMsg {
  type_url: "/osmosis.gamm.v1beta1.SmoothWeightChangeParams";
  value: Uint8Array;
}
/**
 * Parameters for changing the weights in a balancer pool smoothly from
 * a start weight and end weight over a period of time.
 * Currently, the only smooth change supported is linear changing between
 * the two weights, but more types may be added in the future.
 * When these parameters are set, the weight w(t) for pool time `t` is the
 * following:
 *   t <= start_time: w(t) = initial_pool_weights
 *   start_time < t <= start_time + duration:
 *     w(t) = initial_pool_weights + (t - start_time) *
 *       (target_pool_weights - initial_pool_weights) / (duration)
 *   t > start_time + duration: w(t) = target_pool_weights
 */
export interface SmoothWeightChangeParamsAmino {
  /**
   * The start time for beginning the weight change.
   * If a parameter change / pool instantiation leaves this blank,
   * it should be generated by the state_machine as the current time.
   */
  start_time?: Date;
  /** Duration for the weights to change over */
  duration?: DurationAmino;
  /**
   * The initial pool weights. These are copied from the pool's settings
   * at the time of weight change instantiation.
   * The amount PoolAsset.token.amount field is ignored if present,
   * future type refactorings should just have a type with the denom & weight
   * here.
   */
  initial_pool_weights: PoolAssetAmino[];
  /**
   * The target pool weights. The pool weights will change linearly with respect
   * to time between start_time, and start_time + duration. The amount
   * PoolAsset.token.amount field is ignored if present, future type
   * refactorings should just have a type with the denom & weight here.
   */
  target_pool_weights: PoolAssetAmino[];
}
export interface SmoothWeightChangeParamsAminoMsg {
  type: "osmosis/gamm/smooth-weight-change-params";
  value: SmoothWeightChangeParamsAmino;
}
/**
 * Parameters for changing the weights in a balancer pool smoothly from
 * a start weight and end weight over a period of time.
 * Currently, the only smooth change supported is linear changing between
 * the two weights, but more types may be added in the future.
 * When these parameters are set, the weight w(t) for pool time `t` is the
 * following:
 *   t <= start_time: w(t) = initial_pool_weights
 *   start_time < t <= start_time + duration:
 *     w(t) = initial_pool_weights + (t - start_time) *
 *       (target_pool_weights - initial_pool_weights) / (duration)
 *   t > start_time + duration: w(t) = target_pool_weights
 */
export interface SmoothWeightChangeParamsSDKType {
  start_time: Date;
  duration: DurationSDKType;
  initial_pool_weights: PoolAssetSDKType[];
  target_pool_weights: PoolAssetSDKType[];
}
/**
 * PoolParams defined the parameters that will be managed by the pool
 * governance in the future. This params are not managed by the chain
 * governance. Instead they will be managed by the token holders of the pool.
 * The pool's token holders are specified in future_pool_governor.
 */
export interface PoolParams {
  swap_fee: string;
  exit_fee: string;
  smooth_weight_change_params?: SmoothWeightChangeParams;
}
export interface PoolParamsProtoMsg {
  type_url: "/osmosis.gamm.v1beta1.PoolParams";
  value: Uint8Array;
}
export interface PoolParamsProtoMsg {
  type_url: "/osmosis.gamm.v1beta1.PoolParams";
  value: Uint8Array;
}
/**
 * PoolParams defined the parameters that will be managed by the pool
 * governance in the future. This params are not managed by the chain
 * governance. Instead they will be managed by the token holders of the pool.
 * The pool's token holders are specified in future_pool_governor.
 */
export interface PoolParamsAmino {
  swap_fee: string;
  exit_fee: string;
  smooth_weight_change_params?: SmoothWeightChangeParamsAmino;
}
export interface PoolParamsAminoMsg {
  type: "osmosis/gamm/BalancerPoolParams";
  value: PoolParamsAmino;
}
/**
 * PoolParams defined the parameters that will be managed by the pool
 * governance in the future. This params are not managed by the chain
 * governance. Instead they will be managed by the token holders of the pool.
 * The pool's token holders are specified in future_pool_governor.
 */
export interface PoolParamsSDKType {
  swap_fee: string;
  exit_fee: string;
  smooth_weight_change_params?: SmoothWeightChangeParamsSDKType;
}
/**
 * Pool asset is an internal struct that combines the amount of the
 * token in the pool, and its balancer weight.
 * This is an awkward packaging of data,
 * and should be revisited in a future state migration.
 */
export interface PoolAsset {
  /**
   * Coins we are talking about,
   * the denomination must be unique amongst all PoolAssets for this pool.
   */
  token: Coin;
  /** Weight that is not normalized. This weight must be less than 2^50 */
  weight: string;
}
export interface PoolAssetProtoMsg {
  type_url: "/osmosis.gamm.v1beta1.PoolAsset";
  value: Uint8Array;
}
export interface PoolAssetProtoMsg {
  type_url: "/osmosis.gamm.v1beta1.PoolAsset";
  value: Uint8Array;
}
/**
 * Pool asset is an internal struct that combines the amount of the
 * token in the pool, and its balancer weight.
 * This is an awkward packaging of data,
 * and should be revisited in a future state migration.
 */
export interface PoolAssetAmino {
  /**
   * Coins we are talking about,
   * the denomination must be unique amongst all PoolAssets for this pool.
   */
  token?: CoinAmino;
  /** Weight that is not normalized. This weight must be less than 2^50 */
  weight: string;
}
export interface PoolAssetAminoMsg {
  type: "osmosis/gamm/pool-asset";
  value: PoolAssetAmino;
}
/**
 * Pool asset is an internal struct that combines the amount of the
 * token in the pool, and its balancer weight.
 * This is an awkward packaging of data,
 * and should be revisited in a future state migration.
 */
export interface PoolAssetSDKType {
  token: CoinSDKType;
  weight: string;
}
export interface Pool {
  $typeUrl?: "/osmosis.gamm.v1beta1.Pool";
  address: string;
  id: bigint;
  pool_params: PoolParams;
  /**
   * This string specifies who will govern the pool in the future.
   * Valid forms of this are:
   * {token name},{duration}
   * {duration}
   * where {token name} if specified is the token which determines the
   * governor, and if not specified is the LP token for this pool.duration is
   * a time specified as 0w,1w,2w, etc. which specifies how long the token
   * would need to be locked up to count in governance. 0w means no lockup.
   * TODO: Further improve these docs
   */
  future_pool_governor: string;
  /** sum of all LP tokens sent out */
  total_shares: Coin;
  /**
   * These are assumed to be sorted by denomiation.
   * They contain the pool asset and the information about the weight
   */
  pool_assets: PoolAsset[];
  /** sum of all non-normalized pool weights */
  total_weight: string;
}
export interface PoolProtoMsg {
  type_url: "/osmosis.gamm.v1beta1.Pool";
  value: Uint8Array;
}
export interface PoolProtoMsg {
  type_url: "/osmosis.gamm.v1beta1.Pool";
  value: Uint8Array;
}
export interface PoolAmino {
  address: string;
  id: string;
  pool_params?: PoolParamsAmino;
  /**
   * This string specifies who will govern the pool in the future.
   * Valid forms of this are:
   * {token name},{duration}
   * {duration}
   * where {token name} if specified is the token which determines the
   * governor, and if not specified is the LP token for this pool.duration is
   * a time specified as 0w,1w,2w, etc. which specifies how long the token
   * would need to be locked up to count in governance. 0w means no lockup.
   * TODO: Further improve these docs
   */
  future_pool_governor: string;
  /** sum of all LP tokens sent out */
  total_shares?: CoinAmino;
  /**
   * These are assumed to be sorted by denomiation.
   * They contain the pool asset and the information about the weight
   */
  pool_assets: PoolAssetAmino[];
  /** sum of all non-normalized pool weights */
  total_weight: string;
}
export interface PoolAminoMsg {
  type: "osmosis/gamm/BalancerPool";
  value: PoolAmino;
}
export interface PoolSDKType {
  $typeUrl?: "/osmosis.gamm.v1beta1.Pool";
  address: string;
  id: bigint;
  pool_params: PoolParamsSDKType;
  future_pool_governor: string;
  total_shares: CoinSDKType;
  pool_assets: PoolAssetSDKType[];
  total_weight: string;
}
function createBaseSmoothWeightChangeParams(): SmoothWeightChangeParams {
  return {
    start_time: new Date(),
    duration: Duration.fromPartial({}),
    initial_pool_weights: [],
    target_pool_weights: []
  };
}
export const SmoothWeightChangeParams = {
  typeUrl: "/osmosis.gamm.v1beta1.SmoothWeightChangeParams",
  encode(message: SmoothWeightChangeParams, writer: BinaryWriter = BinaryWriter.create()): BinaryWriter {
    if (message.start_time !== undefined) {
      Timestamp.encode(toTimestamp(message.start_time), writer.uint32(10).fork()).ldelim();
    }
    if (message.duration !== undefined) {
      Duration.encode(message.duration, writer.uint32(18).fork()).ldelim();
    }
    for (const v of message.initial_pool_weights) {
      PoolAsset.encode(v!, writer.uint32(26).fork()).ldelim();
    }
    for (const v of message.target_pool_weights) {
      PoolAsset.encode(v!, writer.uint32(34).fork()).ldelim();
    }
    return writer;
  },
  decode(input: BinaryReader | Uint8Array, length?: number): SmoothWeightChangeParams {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSmoothWeightChangeParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.start_time = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          break;
        case 2:
          message.duration = Duration.decode(reader, reader.uint32());
          break;
        case 3:
          message.initial_pool_weights.push(PoolAsset.decode(reader, reader.uint32()));
          break;
        case 4:
          message.target_pool_weights.push(PoolAsset.decode(reader, reader.uint32()));
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromJSON(object: any): SmoothWeightChangeParams {
    return {
      start_time: isSet(object.start_time) ? fromJsonTimestamp(object.start_time) : undefined,
      duration: isSet(object.duration) ? Duration.fromJSON(object.duration) : undefined,
      initial_pool_weights: Array.isArray(object?.initial_pool_weights) ? object.initial_pool_weights.map((e: any) => PoolAsset.fromJSON(e)) : [],
      target_pool_weights: Array.isArray(object?.target_pool_weights) ? object.target_pool_weights.map((e: any) => PoolAsset.fromJSON(e)) : []
    };
  },
  toJSON(message: SmoothWeightChangeParams): unknown {
    const obj: any = {};
    message.start_time !== undefined && (obj.start_time = message.start_time.toISOString());
    message.duration !== undefined && (obj.duration = message.duration ? Duration.toJSON(message.duration) : undefined);
    if (message.initial_pool_weights) {
      obj.initial_pool_weights = message.initial_pool_weights.map(e => e ? PoolAsset.toJSON(e) : undefined);
    } else {
      obj.initial_pool_weights = [];
    }
    if (message.target_pool_weights) {
      obj.target_pool_weights = message.target_pool_weights.map(e => e ? PoolAsset.toJSON(e) : undefined);
    } else {
      obj.target_pool_weights = [];
    }
    return obj;
  },
  fromPartial(object: Partial<SmoothWeightChangeParams>): SmoothWeightChangeParams {
    const message = createBaseSmoothWeightChangeParams();
    message.start_time = object.start_time ?? undefined;
    message.duration = object.duration !== undefined && object.duration !== null ? Duration.fromPartial(object.duration) : undefined;
    message.initial_pool_weights = object.initial_pool_weights?.map(e => PoolAsset.fromPartial(e)) || [];
    message.target_pool_weights = object.target_pool_weights?.map(e => PoolAsset.fromPartial(e)) || [];
    return message;
  },
  fromSDK(object: SmoothWeightChangeParamsSDKType): SmoothWeightChangeParams {
    return {
      start_time: object.start_time ? Timestamp.fromSDK(object.start_time) : undefined,
      duration: object.duration ? Duration.fromSDK(object.duration) : undefined,
      initial_pool_weights: Array.isArray(object?.initial_pool_weights) ? object.initial_pool_weights.map((e: any) => PoolAsset.fromSDK(e)) : [],
      target_pool_weights: Array.isArray(object?.target_pool_weights) ? object.target_pool_weights.map((e: any) => PoolAsset.fromSDK(e)) : []
    };
  },
  toSDK(message: SmoothWeightChangeParams): SmoothWeightChangeParamsSDKType {
    const obj: any = {};
    message.start_time !== undefined && (obj.start_time = message.start_time ? Timestamp.toSDK(message.start_time) : undefined);
    message.duration !== undefined && (obj.duration = message.duration ? Duration.toSDK(message.duration) : undefined);
    if (message.initial_pool_weights) {
      obj.initial_pool_weights = message.initial_pool_weights.map(e => e ? PoolAsset.toSDK(e) : undefined);
    } else {
      obj.initial_pool_weights = [];
    }
    if (message.target_pool_weights) {
      obj.target_pool_weights = message.target_pool_weights.map(e => e ? PoolAsset.toSDK(e) : undefined);
    } else {
      obj.target_pool_weights = [];
    }
    return obj;
  },
  fromAmino(object: SmoothWeightChangeParamsAmino): SmoothWeightChangeParams {
    return {
      start_time: object.start_time,
      duration: object?.duration ? Duration.fromAmino(object.duration) : undefined,
      initial_pool_weights: Array.isArray(object?.initial_pool_weights) ? object.initial_pool_weights.map((e: any) => PoolAsset.fromAmino(e)) : [],
      target_pool_weights: Array.isArray(object?.target_pool_weights) ? object.target_pool_weights.map((e: any) => PoolAsset.fromAmino(e)) : []
    };
  },
  toAmino(message: SmoothWeightChangeParams): SmoothWeightChangeParamsAmino {
    const obj: any = {};
    obj.start_time = message.start_time;
    obj.duration = message.duration ? Duration.toAmino(message.duration) : undefined;
    if (message.initial_pool_weights) {
      obj.initial_pool_weights = message.initial_pool_weights.map(e => e ? PoolAsset.toAmino(e) : undefined);
    } else {
      obj.initial_pool_weights = [];
    }
    if (message.target_pool_weights) {
      obj.target_pool_weights = message.target_pool_weights.map(e => e ? PoolAsset.toAmino(e) : undefined);
    } else {
      obj.target_pool_weights = [];
    }
    return obj;
  },
  fromAminoMsg(object: SmoothWeightChangeParamsAminoMsg): SmoothWeightChangeParams {
    return SmoothWeightChangeParams.fromAmino(object.value);
  },
  toAminoMsg(message: SmoothWeightChangeParams): SmoothWeightChangeParamsAminoMsg {
    return {
      type: "osmosis/gamm/smooth-weight-change-params",
      value: SmoothWeightChangeParams.toAmino(message)
    };
  },
  fromProtoMsg(message: SmoothWeightChangeParamsProtoMsg): SmoothWeightChangeParams {
    return SmoothWeightChangeParams.decode(message.value);
  },
  toProto(message: SmoothWeightChangeParams): Uint8Array {
    return SmoothWeightChangeParams.encode(message).finish();
  },
  toProtoMsg(message: SmoothWeightChangeParams): SmoothWeightChangeParamsProtoMsg {
    return {
      typeUrl: "/osmosis.gamm.v1beta1.SmoothWeightChangeParams",
      value: SmoothWeightChangeParams.encode(message).finish()
    };
  }
};
function createBasePoolParams(): PoolParams {
  return {
    swap_fee: "",
    exit_fee: "",
    smooth_weight_change_params: undefined
  };
}
export const PoolParams = {
  typeUrl: "/osmosis.gamm.v1beta1.PoolParams",
  encode(message: PoolParams, writer: BinaryWriter = BinaryWriter.create()): BinaryWriter {
    if (message.swap_fee !== "") {
      writer.uint32(10).string(Decimal.fromUserInput(message.swap_fee, 18).atomics);
    }
    if (message.exit_fee !== "") {
      writer.uint32(18).string(Decimal.fromUserInput(message.exit_fee, 18).atomics);
    }
    if (message.smooth_weight_change_params !== undefined) {
      SmoothWeightChangeParams.encode(message.smooth_weight_change_params, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },
  decode(input: BinaryReader | Uint8Array, length?: number): PoolParams {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePoolParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.swap_fee = Decimal.fromAtomics(reader.string(), 18).toString();
          break;
        case 2:
          message.exit_fee = Decimal.fromAtomics(reader.string(), 18).toString();
          break;
        case 3:
          message.smooth_weight_change_params = SmoothWeightChangeParams.decode(reader, reader.uint32());
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromJSON(object: any): PoolParams {
    return {
      swap_fee: isSet(object.swap_fee) ? String(object.swap_fee) : "",
      exit_fee: isSet(object.exit_fee) ? String(object.exit_fee) : "",
      smooth_weight_change_params: isSet(object.smooth_weight_change_params) ? SmoothWeightChangeParams.fromJSON(object.smooth_weight_change_params) : undefined
    };
  },
  toJSON(message: PoolParams): unknown {
    const obj: any = {};
    message.swap_fee !== undefined && (obj.swap_fee = message.swap_fee);
    message.exit_fee !== undefined && (obj.exit_fee = message.exit_fee);
    message.smooth_weight_change_params !== undefined && (obj.smooth_weight_change_params = message.smooth_weight_change_params ? SmoothWeightChangeParams.toJSON(message.smooth_weight_change_params) : undefined);
    return obj;
  },
  fromPartial(object: Partial<PoolParams>): PoolParams {
    const message = createBasePoolParams();
    message.swap_fee = object.swap_fee ?? "";
    message.exit_fee = object.exit_fee ?? "";
    message.smooth_weight_change_params = object.smooth_weight_change_params !== undefined && object.smooth_weight_change_params !== null ? SmoothWeightChangeParams.fromPartial(object.smooth_weight_change_params) : undefined;
    return message;
  },
  fromSDK(object: PoolParamsSDKType): PoolParams {
    return {
      swap_fee: object?.swap_fee,
      exit_fee: object?.exit_fee,
      smooth_weight_change_params: object.smooth_weight_change_params ? SmoothWeightChangeParams.fromSDK(object.smooth_weight_change_params) : undefined
    };
  },
  toSDK(message: PoolParams): PoolParamsSDKType {
    const obj: any = {};
    obj.swap_fee = message.swap_fee;
    obj.exit_fee = message.exit_fee;
    message.smooth_weight_change_params !== undefined && (obj.smooth_weight_change_params = message.smooth_weight_change_params ? SmoothWeightChangeParams.toSDK(message.smooth_weight_change_params) : undefined);
    return obj;
  },
  fromAmino(object: PoolParamsAmino): PoolParams {
    return {
      swap_fee: object.swap_fee,
      exit_fee: object.exit_fee,
      smooth_weight_change_params: object?.smooth_weight_change_params ? SmoothWeightChangeParams.fromAmino(object.smooth_weight_change_params) : undefined
    };
  },
  toAmino(message: PoolParams): PoolParamsAmino {
    const obj: any = {};
    obj.swap_fee = message.swap_fee;
    obj.exit_fee = message.exit_fee;
    obj.smooth_weight_change_params = message.smooth_weight_change_params ? SmoothWeightChangeParams.toAmino(message.smooth_weight_change_params) : undefined;
    return obj;
  },
  fromAminoMsg(object: PoolParamsAminoMsg): PoolParams {
    return PoolParams.fromAmino(object.value);
  },
  toAminoMsg(message: PoolParams): PoolParamsAminoMsg {
    return {
      type: "osmosis/gamm/BalancerPoolParams",
      value: PoolParams.toAmino(message)
    };
  },
  fromProtoMsg(message: PoolParamsProtoMsg): PoolParams {
    return PoolParams.decode(message.value);
  },
  toProto(message: PoolParams): Uint8Array {
    return PoolParams.encode(message).finish();
  },
  toProtoMsg(message: PoolParams): PoolParamsProtoMsg {
    return {
      typeUrl: "/osmosis.gamm.v1beta1.PoolParams",
      value: PoolParams.encode(message).finish()
    };
  }
};
function createBasePoolAsset(): PoolAsset {
  return {
    token: Coin.fromPartial({}),
    weight: ""
  };
}
export const PoolAsset = {
  typeUrl: "/osmosis.gamm.v1beta1.PoolAsset",
  encode(message: PoolAsset, writer: BinaryWriter = BinaryWriter.create()): BinaryWriter {
    if (message.token !== undefined) {
      Coin.encode(message.token, writer.uint32(10).fork()).ldelim();
    }
    if (message.weight !== "") {
      writer.uint32(18).string(message.weight);
    }
    return writer;
  },
  decode(input: BinaryReader | Uint8Array, length?: number): PoolAsset {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePoolAsset();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.token = Coin.decode(reader, reader.uint32());
          break;
        case 2:
          message.weight = reader.string();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromJSON(object: any): PoolAsset {
    return {
      token: isSet(object.token) ? Coin.fromJSON(object.token) : undefined,
      weight: isSet(object.weight) ? String(object.weight) : ""
    };
  },
  toJSON(message: PoolAsset): unknown {
    const obj: any = {};
    message.token !== undefined && (obj.token = message.token ? Coin.toJSON(message.token) : undefined);
    message.weight !== undefined && (obj.weight = message.weight);
    return obj;
  },
  fromPartial(object: Partial<PoolAsset>): PoolAsset {
    const message = createBasePoolAsset();
    message.token = object.token !== undefined && object.token !== null ? Coin.fromPartial(object.token) : undefined;
    message.weight = object.weight ?? "";
    return message;
  },
  fromSDK(object: PoolAssetSDKType): PoolAsset {
    return {
      token: object.token ? Coin.fromSDK(object.token) : undefined,
      weight: object?.weight
    };
  },
  toSDK(message: PoolAsset): PoolAssetSDKType {
    const obj: any = {};
    message.token !== undefined && (obj.token = message.token ? Coin.toSDK(message.token) : undefined);
    obj.weight = message.weight;
    return obj;
  },
  fromAmino(object: PoolAssetAmino): PoolAsset {
    return {
      token: object?.token ? Coin.fromAmino(object.token) : undefined,
      weight: object.weight
    };
  },
  toAmino(message: PoolAsset): PoolAssetAmino {
    const obj: any = {};
    obj.token = message.token ? Coin.toAmino(message.token) : undefined;
    obj.weight = message.weight;
    return obj;
  },
  fromAminoMsg(object: PoolAssetAminoMsg): PoolAsset {
    return PoolAsset.fromAmino(object.value);
  },
  toAminoMsg(message: PoolAsset): PoolAssetAminoMsg {
    return {
      type: "osmosis/gamm/pool-asset",
      value: PoolAsset.toAmino(message)
    };
  },
  fromProtoMsg(message: PoolAssetProtoMsg): PoolAsset {
    return PoolAsset.decode(message.value);
  },
  toProto(message: PoolAsset): Uint8Array {
    return PoolAsset.encode(message).finish();
  },
  toProtoMsg(message: PoolAsset): PoolAssetProtoMsg {
    return {
      typeUrl: "/osmosis.gamm.v1beta1.PoolAsset",
      value: PoolAsset.encode(message).finish()
    };
  }
};
function createBasePool(): Pool {
  return {
    $typeUrl: "/osmosis.gamm.v1beta1.Pool",
    address: "",
    id: BigInt(0),
    pool_params: PoolParams.fromPartial({}),
    future_pool_governor: "",
    total_shares: Coin.fromPartial({}),
    pool_assets: [],
    total_weight: ""
  };
}
export const Pool = {
  typeUrl: "/osmosis.gamm.v1beta1.Pool",
  encode(message: Pool, writer: BinaryWriter = BinaryWriter.create()): BinaryWriter {
    if (message.address !== "") {
      writer.uint32(10).string(message.address);
    }
    if (message.id !== BigInt(0)) {
      writer.uint32(16).uint64(message.id);
    }
    if (message.pool_params !== undefined) {
      PoolParams.encode(message.pool_params, writer.uint32(26).fork()).ldelim();
    }
    if (message.future_pool_governor !== "") {
      writer.uint32(34).string(message.future_pool_governor);
    }
    if (message.total_shares !== undefined) {
      Coin.encode(message.total_shares, writer.uint32(42).fork()).ldelim();
    }
    for (const v of message.pool_assets) {
      PoolAsset.encode(v!, writer.uint32(50).fork()).ldelim();
    }
    if (message.total_weight !== "") {
      writer.uint32(58).string(message.total_weight);
    }
    return writer;
  },
  decode(input: BinaryReader | Uint8Array, length?: number): Pool {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePool();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.address = reader.string();
          break;
        case 2:
          message.id = reader.uint64();
          break;
        case 3:
          message.pool_params = PoolParams.decode(reader, reader.uint32());
          break;
        case 4:
          message.future_pool_governor = reader.string();
          break;
        case 5:
          message.total_shares = Coin.decode(reader, reader.uint32());
          break;
        case 6:
          message.pool_assets.push(PoolAsset.decode(reader, reader.uint32()));
          break;
        case 7:
          message.total_weight = reader.string();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromJSON(object: any): Pool {
    return {
      address: isSet(object.address) ? String(object.address) : "",
      id: isSet(object.id) ? BigInt(object.id.toString()) : BigInt(0),
      pool_params: isSet(object.pool_params) ? PoolParams.fromJSON(object.pool_params) : undefined,
      future_pool_governor: isSet(object.future_pool_governor) ? String(object.future_pool_governor) : "",
      total_shares: isSet(object.total_shares) ? Coin.fromJSON(object.total_shares) : undefined,
      pool_assets: Array.isArray(object?.pool_assets) ? object.pool_assets.map((e: any) => PoolAsset.fromJSON(e)) : [],
      total_weight: isSet(object.total_weight) ? String(object.total_weight) : ""
    };
  },
  toJSON(message: Pool): unknown {
    const obj: any = {};
    message.address !== undefined && (obj.address = message.address);
    message.id !== undefined && (obj.id = (message.id || BigInt(0)).toString());
    message.pool_params !== undefined && (obj.pool_params = message.pool_params ? PoolParams.toJSON(message.pool_params) : undefined);
    message.future_pool_governor !== undefined && (obj.future_pool_governor = message.future_pool_governor);
    message.total_shares !== undefined && (obj.total_shares = message.total_shares ? Coin.toJSON(message.total_shares) : undefined);
    if (message.pool_assets) {
      obj.pool_assets = message.pool_assets.map(e => e ? PoolAsset.toJSON(e) : undefined);
    } else {
      obj.pool_assets = [];
    }
    message.total_weight !== undefined && (obj.total_weight = message.total_weight);
    return obj;
  },
  fromPartial(object: Partial<Pool>): Pool {
    const message = createBasePool();
    message.address = object.address ?? "";
    message.id = object.id !== undefined && object.id !== null ? BigInt(object.id.toString()) : BigInt(0);
    message.pool_params = object.pool_params !== undefined && object.pool_params !== null ? PoolParams.fromPartial(object.pool_params) : undefined;
    message.future_pool_governor = object.future_pool_governor ?? "";
    message.total_shares = object.total_shares !== undefined && object.total_shares !== null ? Coin.fromPartial(object.total_shares) : undefined;
    message.pool_assets = object.pool_assets?.map(e => PoolAsset.fromPartial(e)) || [];
    message.total_weight = object.total_weight ?? "";
    return message;
  },
  fromSDK(object: PoolSDKType): Pool {
    return {
      address: object?.address,
      id: object?.id,
      pool_params: object.pool_params ? PoolParams.fromSDK(object.pool_params) : undefined,
      future_pool_governor: object?.future_pool_governor,
      total_shares: object.total_shares ? Coin.fromSDK(object.total_shares) : undefined,
      pool_assets: Array.isArray(object?.pool_assets) ? object.pool_assets.map((e: any) => PoolAsset.fromSDK(e)) : [],
      total_weight: object?.total_weight
    };
  },
  toSDK(message: Pool): PoolSDKType {
    const obj: any = {};
    obj.address = message.address;
    obj.id = message.id;
    message.pool_params !== undefined && (obj.pool_params = message.pool_params ? PoolParams.toSDK(message.pool_params) : undefined);
    obj.future_pool_governor = message.future_pool_governor;
    message.total_shares !== undefined && (obj.total_shares = message.total_shares ? Coin.toSDK(message.total_shares) : undefined);
    if (message.pool_assets) {
      obj.pool_assets = message.pool_assets.map(e => e ? PoolAsset.toSDK(e) : undefined);
    } else {
      obj.pool_assets = [];
    }
    obj.total_weight = message.total_weight;
    return obj;
  },
  fromAmino(object: PoolAmino): Pool {
    return {
      address: object.address,
      id: BigInt(object.id),
      pool_params: object?.pool_params ? PoolParams.fromAmino(object.pool_params) : undefined,
      future_pool_governor: object.future_pool_governor,
      total_shares: object?.total_shares ? Coin.fromAmino(object.total_shares) : undefined,
      pool_assets: Array.isArray(object?.pool_assets) ? object.pool_assets.map((e: any) => PoolAsset.fromAmino(e)) : [],
      total_weight: object.total_weight
    };
  },
  toAmino(message: Pool): PoolAmino {
    const obj: any = {};
    obj.address = message.address;
    obj.id = message.id ? message.id.toString() : undefined;
    obj.pool_params = message.pool_params ? PoolParams.toAmino(message.pool_params) : undefined;
    obj.future_pool_governor = message.future_pool_governor;
    obj.total_shares = message.total_shares ? Coin.toAmino(message.total_shares) : undefined;
    if (message.pool_assets) {
      obj.pool_assets = message.pool_assets.map(e => e ? PoolAsset.toAmino(e) : undefined);
    } else {
      obj.pool_assets = [];
    }
    obj.total_weight = message.total_weight;
    return obj;
  },
  fromAminoMsg(object: PoolAminoMsg): Pool {
    return Pool.fromAmino(object.value);
  },
  toAminoMsg(message: Pool): PoolAminoMsg {
    return {
      type: "osmosis/gamm/BalancerPool",
      value: Pool.toAmino(message)
    };
  },
  fromProtoMsg(message: PoolProtoMsg): Pool {
    return Pool.decode(message.value);
  },
  toProto(message: Pool): Uint8Array {
    return Pool.encode(message).finish();
  },
  toProtoMsg(message: Pool): PoolProtoMsg {
    return {
      typeUrl: "/osmosis.gamm.v1beta1.Pool",
      value: Pool.encode(message).finish()
    };
  }
};